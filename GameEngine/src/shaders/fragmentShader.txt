#version 400 core

//Input variables from our vertex shader
in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;

//Calculated color
out vec4 out_color;

//Values given to us in main code
uniform sampler2D textureSampler;
uniform vec3 lightColor;
uniform float shineDamper;
uniform float reflectivity;

void main(void) {

	//Normalize the surface normal, light and camera vectors 
	vec3 unitNormal       = normalize(surfaceNormal);
	vec3 unitLightVector  = normalize(toLightVector);
	vec3 unitCameraVector = normalize(toCameraVector);
	
	//Calculate the dot product of the unit normal and unit light vector
	float nDot1      = dot(unitNormal, unitLightVector);
	float brightness = max(nDot1, 0.0);
	
	vec3 diffuse = brightness * lightColor;
	
	//SPECULAR LIGHTING CALCULATIONS
	/* ######################################################################### */
	//Calculate light direction which is just the negative of the unit light vector
	vec3 lightDirection = -unitLightVector;
	
	//Find reflected light using GLSL reflect function
	vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
	
	//Calculate how much reflected light is going into our camera
	float specularFactor = dot(reflectedLightDirection, unitCameraVector);
	specularFactor = max(specularFactor, 0.0);
	
	//Apply shine damper
	float dampedFactor = pow(specularFactor, shineDamper);
	
	vec3 finalSpecular = dampedFactor * reflectivity * lightColor;
	/* ######################################################################### */
	
	//Apply diffuse and finalSpecular to texture
	out_color = vec4(diffuse, 1.0) * texture(textureSampler, pass_textureCoords) + vec4(finalSpecular, 1.0);

}